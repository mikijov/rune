// Generated from Rune.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import (
	"mikijov/rune-antlr/vm"
)

var _ vm.Type // inhibit unused import error

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 23, 142,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3,
	14, 3, 14, 3, 15, 3, 15, 3, 16, 6, 16, 86, 10, 16, 13, 16, 14, 16, 87,
	3, 17, 7, 17, 91, 10, 17, 12, 17, 14, 17, 94, 11, 17, 3, 17, 3, 17, 6,
	17, 98, 10, 17, 13, 17, 14, 17, 99, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 111, 10, 18, 3, 19, 3, 19, 7, 19, 115,
	10, 19, 12, 19, 14, 19, 118, 11, 19, 3, 20, 5, 20, 121, 10, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 21, 6, 21, 128, 10, 21, 13, 21, 14, 21, 129, 3,
	21, 3, 21, 3, 22, 3, 22, 7, 22, 136, 10, 22, 12, 22, 14, 22, 139, 11, 22,
	3, 22, 3, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17,
	10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35,
	19, 37, 20, 39, 21, 41, 22, 43, 23, 3, 2, 7, 3, 2, 50, 59, 5, 2, 67, 92,
	97, 97, 99, 124, 6, 2, 50, 59, 67, 92, 97, 97, 99, 124, 4, 2, 11, 11, 34,
	34, 4, 2, 12, 12, 15, 15, 2, 149, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2,
	7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2,
	2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2,
	2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2,
	2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3,
	2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 3, 45,
	3, 2, 2, 2, 5, 47, 3, 2, 2, 2, 7, 50, 3, 2, 2, 2, 9, 52, 3, 2, 2, 2, 11,
	54, 3, 2, 2, 2, 13, 58, 3, 2, 2, 2, 15, 65, 3, 2, 2, 2, 17, 70, 3, 2, 2,
	2, 19, 72, 3, 2, 2, 2, 21, 74, 3, 2, 2, 2, 23, 76, 3, 2, 2, 2, 25, 78,
	3, 2, 2, 2, 27, 80, 3, 2, 2, 2, 29, 82, 3, 2, 2, 2, 31, 85, 3, 2, 2, 2,
	33, 92, 3, 2, 2, 2, 35, 110, 3, 2, 2, 2, 37, 112, 3, 2, 2, 2, 39, 120,
	3, 2, 2, 2, 41, 127, 3, 2, 2, 2, 43, 133, 3, 2, 2, 2, 45, 46, 7, 61, 2,
	2, 46, 4, 3, 2, 2, 2, 47, 48, 7, 60, 2, 2, 48, 49, 7, 63, 2, 2, 49, 6,
	3, 2, 2, 2, 50, 51, 7, 60, 2, 2, 51, 8, 3, 2, 2, 2, 52, 53, 7, 63, 2, 2,
	53, 10, 3, 2, 2, 2, 54, 55, 7, 107, 2, 2, 55, 56, 7, 112, 2, 2, 56, 57,
	7, 118, 2, 2, 57, 12, 3, 2, 2, 2, 58, 59, 7, 117, 2, 2, 59, 60, 7, 118,
	2, 2, 60, 61, 7, 116, 2, 2, 61, 62, 7, 107, 2, 2, 62, 63, 7, 112, 2, 2,
	63, 64, 7, 105, 2, 2, 64, 14, 3, 2, 2, 2, 65, 66, 7, 100, 2, 2, 66, 67,
	7, 113, 2, 2, 67, 68, 7, 113, 2, 2, 68, 69, 7, 110, 2, 2, 69, 16, 3, 2,
	2, 2, 70, 71, 7, 42, 2, 2, 71, 18, 3, 2, 2, 2, 72, 73, 7, 43, 2, 2, 73,
	20, 3, 2, 2, 2, 74, 75, 7, 47, 2, 2, 75, 22, 3, 2, 2, 2, 76, 77, 7, 44,
	2, 2, 77, 24, 3, 2, 2, 2, 78, 79, 7, 49, 2, 2, 79, 26, 3, 2, 2, 2, 80,
	81, 7, 39, 2, 2, 81, 28, 3, 2, 2, 2, 82, 83, 7, 45, 2, 2, 83, 30, 3, 2,
	2, 2, 84, 86, 9, 2, 2, 2, 85, 84, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 85,
	3, 2, 2, 2, 87, 88, 3, 2, 2, 2, 88, 32, 3, 2, 2, 2, 89, 91, 9, 2, 2, 2,
	90, 89, 3, 2, 2, 2, 91, 94, 3, 2, 2, 2, 92, 90, 3, 2, 2, 2, 92, 93, 3,
	2, 2, 2, 93, 95, 3, 2, 2, 2, 94, 92, 3, 2, 2, 2, 95, 97, 7, 48, 2, 2, 96,
	98, 9, 2, 2, 2, 97, 96, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2, 99, 97, 3, 2, 2,
	2, 99, 100, 3, 2, 2, 2, 100, 34, 3, 2, 2, 2, 101, 102, 7, 118, 2, 2, 102,
	103, 7, 116, 2, 2, 103, 104, 7, 119, 2, 2, 104, 111, 7, 103, 2, 2, 105,
	106, 7, 104, 2, 2, 106, 107, 7, 99, 2, 2, 107, 108, 7, 110, 2, 2, 108,
	109, 7, 117, 2, 2, 109, 111, 7, 103, 2, 2, 110, 101, 3, 2, 2, 2, 110, 105,
	3, 2, 2, 2, 111, 36, 3, 2, 2, 2, 112, 116, 9, 3, 2, 2, 113, 115, 9, 4,
	2, 2, 114, 113, 3, 2, 2, 2, 115, 118, 3, 2, 2, 2, 116, 114, 3, 2, 2, 2,
	116, 117, 3, 2, 2, 2, 117, 38, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119, 121,
	7, 15, 2, 2, 120, 119, 3, 2, 2, 2, 120, 121, 3, 2, 2, 2, 121, 122, 3, 2,
	2, 2, 122, 123, 7, 12, 2, 2, 123, 124, 3, 2, 2, 2, 124, 125, 8, 20, 2,
	2, 125, 40, 3, 2, 2, 2, 126, 128, 9, 5, 2, 2, 127, 126, 3, 2, 2, 2, 128,
	129, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 129, 130, 3, 2, 2, 2, 130, 131,
	3, 2, 2, 2, 131, 132, 8, 21, 2, 2, 132, 42, 3, 2, 2, 2, 133, 137, 7, 37,
	2, 2, 134, 136, 10, 6, 2, 2, 135, 134, 3, 2, 2, 2, 136, 139, 3, 2, 2, 2,
	137, 135, 3, 2, 2, 2, 137, 138, 3, 2, 2, 2, 138, 140, 3, 2, 2, 2, 139,
	137, 3, 2, 2, 2, 140, 141, 8, 22, 2, 2, 141, 44, 3, 2, 2, 2, 11, 2, 87,
	92, 99, 110, 116, 120, 129, 137, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "';'", "':='", "':'", "'='", "'int'", "'string'", "'bool'", "'('",
	"')'", "'-'", "'*'", "'/'", "'%'", "'+'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "INTEGER_LITERAL",
	"REAL_LITERAL", "BOOLEAN_LITERAL", "IDENTIFIER", "LINENDING", "WHITESPACE",
	"COMMENT",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "INTEGER_LITERAL", "REAL_LITERAL",
	"BOOLEAN_LITERAL", "IDENTIFIER", "LINENDING", "WHITESPACE", "COMMENT",
}

type RuneLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewRuneLexer(input antlr.CharStream) *RuneLexer {

	l := new(RuneLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Rune.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// RuneLexer tokens.
const (
	RuneLexerT__0            = 1
	RuneLexerT__1            = 2
	RuneLexerT__2            = 3
	RuneLexerT__3            = 4
	RuneLexerT__4            = 5
	RuneLexerT__5            = 6
	RuneLexerT__6            = 7
	RuneLexerT__7            = 8
	RuneLexerT__8            = 9
	RuneLexerT__9            = 10
	RuneLexerT__10           = 11
	RuneLexerT__11           = 12
	RuneLexerT__12           = 13
	RuneLexerT__13           = 14
	RuneLexerINTEGER_LITERAL = 15
	RuneLexerREAL_LITERAL    = 16
	RuneLexerBOOLEAN_LITERAL = 17
	RuneLexerIDENTIFIER      = 18
	RuneLexerLINENDING       = 19
	RuneLexerWHITESPACE      = 20
	RuneLexerCOMMENT         = 21
)
