# rune
# console := import("console")
1 + 2
true != false
1 + 2 * 3

func fibbonaci(count :int) :int
    n2 := 1
    n1 := 1
    count := count - 2
    loop while count > 0
        count = count - 1
        temp := n2 + n1
        n2 = n1
        n1 = temp
    return n1

fibbonaci :func(count :int) :int = (n2 := 1, n1 := 1, count := count - 2, loop while count > 0 (count = count - 1, temp := n2 + n1, n2 = n1, n1 = temp) return n1)

console.print("Enter value for n:")
count := console.input()
console.print("fibbonaci({count})={fibbonaci(count)}")

func quicksort(A :list, lo, hi :int)
    if lo < hi
        p := partition(A, lo, hi)
        quicksort(A, lo, p - 1)
        quicksort(A, p + 1, hi)

func partition(A :list, lo, hi :int) :int
    pivot := A[hi]
    i := lo - 1

    j := lo
    loop while j < hi
        if A[j] < pivot then
            i = i + 1
            temp := A[i], A[i] = A[j], A[j] = temp
    if A[hi] < A[i + 1]
        temp := A[i + 1], A[i + 1] = A[hi], A[hi] = temp
    return i + 1

func newCustomer(adr :string) :map
    return {
        name: "Default",
        address: if (not adr empty) adr else "N/A",
    }

func someFibNumbers() :int[]
    return [
        fibbonaci(1),
        fibbonaci(2),
        fibbonaci(3),
        fibbonaci(4),
        fibbonaci(5),
    ]
